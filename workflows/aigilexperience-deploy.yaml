name: AigileXperience Deploy
commands:
  - name: 1) Frontend Vercel-Setup (Branch, Files, ENV, PR)
    command: |
      set -euo pipefail
      test -d .git || { echo "‚ùå Kein Git-Repo gefunden."; exit 1; }
      test -d apps/frontend || { echo "‚ùå apps/frontend fehlt."; exit 1; }

      BR="deploy/vercel-setup"
      echo "‚ñ∂Ô∏è Git: Branch $BR anlegen"
      git checkout -B "$BR"

      echo "‚ñ∂Ô∏è Vercel Projektdatei anlegen"
      cat > vercel.json <<'JSON'
{
  "version": 2,
  "builds": [
    { "src": "apps/frontend/next.config.mjs", "use": "@vercel/next" }
  ],
  "env": {},
  "framework": "nextjs"
}
JSON

      echo "‚ñ∂Ô∏è Frontend ENV (Production-URLs konfigurieren)"
      # Passe diese URLs auf deine Backend-Deployments an.
      mkdir -p apps/frontend
      if ! grep -q "NEXT_PUBLIC_API_URL" apps/frontend/.env.local.example 2>/dev/null; then
        echo "NEXT_PUBLIC_API_URL=https://<DEIN-BACKEND>/api/venture/generate" >> apps/frontend/.env.local.example
      fi
      if ! grep -q "NEXT_PUBLIC_API_RECALC_URL" apps/frontend/.env.local.example 2>/dev/null; then
        echo "NEXT_PUBLIC_API_RECALC_URL=https://<DEIN-BACKEND>/api/venture/recalc" >> apps/frontend/.env.local.example
      fi

      echo "‚ñ∂Ô∏è README Hinweis zu Deploy"
      awk 'BEGIN{add=1} {print} END{
        print "\n## Deploy (Vercel)\n- Frontend: Vercel (via GitHub connect)\n- Backend: externe URL (Render/Fly/etc.) in apps/frontend/.env.local.example eintragen\n"
      }' README.md > /tmp/README.md && mv /tmp/README.md README.md

      echo "‚ñ∂Ô∏è √Ñnderungen committen"
      git add vercel.json apps/frontend/.env.local.example README.md
      git commit -m "chore(deploy): add Vercel config + FE env examples"

      echo "‚ñ∂Ô∏è Push & PR erstellen"
      CURRENT_REMOTE=$(git remote | head -n1)
      git push -u "$CURRENT_REMOTE" "$BR"

      if command -v gh >/dev/null 2>&1; then
        gh pr create --fill --title "Vercel Frontend Setup" --body "Vercel deploy config + FE env; bitte Vercel-GitHub-App verbinden und ENV im Vercel-Projekt setzen."
        echo "‚úÖ PR erstellt. Bitte PR pr√ºfen; CodeRabbit reviewt automatisch, falls App installiert ist."
      else
        echo "‚ÑπÔ∏è gh CLI nicht gefunden ‚Äì √∂ffne GitHub manuell und erstelle eine PR von $BR ‚Üí main."
      fi

      echo "‚ö†Ô∏è WICHTIG:"
      echo "- Stelle sicher, dass die Vercel GitHub App auf dieses Repo installiert ist."
      echo "- Setze im Vercel Projekt die ENV Variablen entsprechend (NEXT_PUBLIC_API_URL, NEXT_PUBLIC_API_RECALC_URL)."
      echo "- Merge der PR ‚Üí Vercel produziert Preview/Production Deploys."

  - name: 2) Frontend Vercel ‚Äì Direct Deploy (mit Backend URL)
    command: |
      set -euo pipefail
      : "${BACKEND_URL:?Bitte BACKEND_URL setzen, z.B.: export BACKEND_URL=https://aigilexperience-backend.onrender.com}"
      
      if ! command -v vercel >/dev/null 2>&1; then
        echo "‚ùå vercel CLI nicht gefunden. Installiere mit: npm i -g vercel"
        exit 1
      fi
      
      echo "‚ñ∂Ô∏è Vercel Projekt linken/erstellen"
      vercel link --project AigileXperience --yes || true
      
      echo "‚ñ∂Ô∏è Environment Variables setzen"
      vercel env rm NEXT_PUBLIC_API_URL production --yes 2>/dev/null || true
      vercel env rm NEXT_PUBLIC_API_RECALC_URL production --yes 2>/dev/null || true
      echo -n "$BACKEND_URL/api/venture/generate" | vercel env add NEXT_PUBLIC_API_URL production
      echo -n "$BACKEND_URL/api/venture/recalc" | vercel env add NEXT_PUBLIC_API_RECALC_URL production
      
      echo "‚ñ∂Ô∏è Preview Environment auch setzen"
      echo -n "$BACKEND_URL/api/venture/generate" | vercel env add NEXT_PUBLIC_API_URL preview 2>/dev/null || true
      echo -n "$BACKEND_URL/api/venture/recalc" | vercel env add NEXT_PUBLIC_API_RECALC_URL preview 2>/dev/null || true
      
      echo "‚ñ∂Ô∏è Production Deploy"
      vercel --prod --yes
      
      echo "‚úÖ Deployment abgeschlossen! URL siehe oben."
      echo "üí° Tipp: 'vercel env pull apps/frontend/.env.local' um ENVs lokal zu spiegeln"
